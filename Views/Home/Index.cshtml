@model IEnumerable<WebApplicationProject.Models.WordData>

@{
    ViewData["Title"] = "Index";
}
<style>
    .pt-3-half {
        padding-top: 1.4rem;
    }
</style>
<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>

<div class="card-body" style="width:49%">
    <div id="table" class="table-editable">
        <span class="table-add float-right mb-3 mr-2">
            <a href="#!" class="text-success">
                <i class="fas fa-plus fa-2x" aria-hidden="true"></i>
            </a>
        </span>
        <table class="table table-bordered table-responsive-md table-striped text-center" id="tblWord">
            <thead>
                <tr>
                    <th class="text-center">Words</th>
                    <th class="text-center">Result</th>

                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="pt-3-half edit " style="width:27%; padding-top:3px; padding-bottom:3px; padding-left:3px;padding-right:3px;" contenteditable="true"><input value="" style="width:99%" type="text" /></td>
                    <td class="pt-3-half" style="width:5%; padding-top:3px; padding-bottom:3px; padding-left:3px;padding-right:3px;"></td>

                </tr>

            </tbody>
        </table>
    </div>
</div>
<button type="button" id="getvalue" class="btn btn-primary">Submit</button>

@*@foreach (var item in Model)
{
    
<div id="dictionary">
    @Html.DisplayFor(modelItem => item.WordName)
</div>
   
}*@

@*<table class="table">
        <thead>
            <tr>

                <th>
                    @Html.DisplayNameFor(model => model.WordName)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
    @foreach (var item in Model) {
            <tr>

                <td>
                    @Html.DisplayFor(modelItem => item.WordName)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new {  id=item.WordId  }) |

                </td>
            </tr>
    }
        </tbody>
    </table>*@

@section Scripts
{
    <script src="~/lib/jquery/dist/jquery.js" type="text/javascript"></script>
    <script>

        $(".table-editable").keyup(function (event) {
            if (event.keyCode == 13) {
                $('#table tr:last').after('<tr><td class="pt-3-half edit" style="width:27%; padding-top:3px; padding-bottom:3px; padding-left:3px;padding-right:3px;" contenteditable="true" ><input value="" style="width:99%" type="text"/></td><td class="pt-3-half" style="width:5%; padding-top:3px; padding-bottom:3px; padding-left:3px;padding-right:3px;"></td></tr>');
                $(this).trigger("keydown", [9]);
            }
        });

        $("#getvalue").click(function () {
            const $rows = $tableID.find('tr');
            const headers = [];
            const data = [];
            const dic = [];


            $($rows.shift()).find('th:not(:empty)').each(function () {

                headers.push($(this).text().toLowerCase());
                console.log(headers);
            });
            $tableID.find('td.edit').each(function () {
                data.push($(this).find('input').val());
                console.log(data);
            });


            var myArray = [];

    @foreach (var d in Model)
    {
        
        @:myArray.push("@d.WordName");

    }

            console.log(myArray);

           
            
            var result = [];
                $.each(data, function (idx, value) {
                   // debugger
                    if ($.inArray(value, myArray) !== -1) {                      
                        console.log('Match: ' + value);
                        result.push('Correct');
                    } else {
                      
                        console.log('Not Match: ' + value);
                        result.push('Wrong');
                    }
                    console.log(result);
                });

            //$.each(result, function (index, value) {
            //    $tableID.find("td:not(.edit):eq(index)").append(value);
            //});
           

            $tableID.find("td:not(.edit):eq(0)").append(result[0]);
            $tableID.find("td:not(.edit):eq(1)").append(result[1]);
            $tableID.find("td:not(.edit):eq(2)").append(result[2]);
            $tableID.find("td:not(.edit):eq(3)").append(result[3]);
            $tableID.find("td:not(.edit):eq(4)").append(result[4]);
            $tableID.find("td:not(.edit):eq(5)").append(result[5]);
            $tableID.find("td:not(.edit):eq(6)").append(result[6]);
            $tableID.find("td:not(.edit):eq(7)").append(result[7]);
            $tableID.find("td:not(.edit):eq(8)").append(result[8]);
            $tableID.find("td:not(.edit):eq(9)").append(result[9]);
            $tableID.find("td:not(.edit):eq(10)").append(result[10]);

           
            $tableID.find("td:not(.edit):eq(11)").append(result[11]);
            $tableID.find("td:not(.edit):eq(12)").append(result[12]);
            $tableID.find("td:not(.edit):eq(13)").append(result[13]);
            $tableID.find("td:not(.edit):eq(14)").append(result[14]);
            $tableID.find("td:not(.edit):eq(15)").append(result[15]);
            $tableID.find("td:not(.edit):eq(16)").append(result[16]);
            $tableID.find("td:not(.edit):eq(17)").append(result[17]);
            $tableID.find("td:not(.edit):eq(18)").append(result[18]);
            $tableID.find("td:not(.edit):eq(19)").append(result[19]);
            $tableID.find("td:not(.edit):eq(20)").append(result[20]);
          
       

        });

        //---------------------------------------------------------------------
        const $tableID = $('#table');
        const $BTN = $('#export-btn');
        const $EXPORT = $('#export');

        const newTr = `
<tr class="hide">
          <td class="pt-3-half" contenteditable="true">Example</td>
          <td class="pt-3-half" contenteditable="true">Example</td>
</tr>`;

        $('.table-add').on('click', 'i', () => {

            const $clone = $tableID.find('tbody tr').last().clone(true).removeClass('hide table-line');

            if ($tableID.find('tbody tr').length === 0) {

                $('tbody').append(newTr);
            }

            $tableID.find('table').append($clone);
        });

        $tableID.on('click', '.table-remove', function () {

            $(this).parents('tr').detach();
        });

        $tableID.on('click', '.table-up', function () {

            const $row = $(this).parents('tr');

            if ($row.index() === 0) {
                return;
            }

            $row.prev().before($row.get(0));
        });

        $tableID.on('click', '.table-down', function () {

            const $row = $(this).parents('tr');
            $row.next().after($row.get(0));
        });

        // A few jQuery helpers for exporting only
        jQuery.fn.pop = [].pop;
        jQuery.fn.shift = [].shift;

        $BTN.on('click', () => {

            const $rows = $tableID.find('tr:not(:hidden)');
            const headers = [];
            const data = [];

            // Get the headers (add special header logic here)
            $($rows.shift()).find('th:not(:empty)').each(function () {

                headers.push($(this).text().toLowerCase());
            });

            // Turn all existing rows into a loopable array
            $rows.each(function () {
                const $td = $(this).find('td');
                const h = {};

                // Use the headers from earlier to name our hash keys
                headers.forEach((header, i) => {

                    h[header] = $td.eq(i).text();
                });

                data.push(h);
            });

            // Output the result
            $EXPORT.text(JSON.stringify(data));
        });
    </script>

}
